// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	service "gitlab.trendyol.com/platform/messaging/kafka/kafka-stream-api/domain/service"
)

// TopicService is an autogenerated mock type for the TopicService type
type TopicService struct {
	mock.Mock
}

// FetchLastMessages provides a mock function with given fields: ctx, clusterId, topic, numMessages
func (_m *TopicService) FetchLastMessages(ctx *fiber.Ctx, clusterId string, topic string, numMessages int) ([]service.Message, error) {
	ret := _m.Called(ctx, clusterId, topic, numMessages)

	if len(ret) == 0 {
		panic("no return value specified for FetchLastMessages")
	}

	var r0 []service.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string, string, int) ([]service.Message, error)); ok {
		return rf(ctx, clusterId, topic, numMessages)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string, string, int) []service.Message); ok {
		r0 = rf(ctx, clusterId, topic, numMessages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx, string, string, int) error); ok {
		r1 = rf(ctx, clusterId, topic, numMessages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTopicService creates a new instance of TopicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopicService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopicService {
	mock := &TopicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
